{"name":"RuBeLA","tagline":"Rule Based Link Adaptation","body":"About RuBeLA\r\n======\r\n\r\nThis project combine two different works:\r\n- A mechanism for link adaptation in wireless networks based on rules using the tau-fst library (http://baliosian.github.io/tau-fst/).\r\n- The NS3 Simulator with ns-3-dce module and some modifications to simulate the adaptation mechanism (http://mrichart.github.io/ns-3-dev-git/).\r\n\r\nIn detail it consist on the development and application of the tau-fst library for a network self management problem and the implementation of the solution on the NS3 Network Simulator.\r\nWe have ported the library to run on the NS3 so as to use it on a policy-based network management solution. \r\nThis work include the implementation of the policy management system which consist of a Policy Decision Point (PDP), a monitoring service, and a Policy Enforcement Point (PEP).\r\nThe PDPâ€™s task is to take autonomous decisions, based on the messages it receives from the monitor. \r\nTo this purpose, it uses a finite state machine generated by the tau-fst library.\r\nThe monitoring service watch for some configurable variables from the network perfomance and emmit\r\nmessages to the PDP.\r\nFinnaly, the PEP receive the decisions generated by the PDP and convert them into actions on the nodes. For example, change tranmission parameters of nodes. To accomplish this task we also needed to make some changes on the NS3 simulator to be able to modify some parameters for the particular problem we ar dealing with.\r\nAfter implementing the system, we have also define a a set of rules to find a solution to the problem and tested them on different scenarios.\r\n  \r\nHow to use it\r\n======\r\n\r\nSteps to configure and build the project after you clone it:\r\n\r\n    Download all the submodules:\r\n        git submodule init\r\n        git submodule update\r\n\r\n    Download bake: hg clone http://code.nsnam.org/bake (you need Mercurial installed)\r\n\r\n    Set variable for bake: export BAKE_HOME=pwd/bake export PATH=$PATH:$BAKE_HOME export PYTHONPATH=$PYTHONPATH:$BAKE_HOME\r\n\r\n    Configure bake: cp bakeconf_rubela.xml bake/ bake.py configure -c bakeconf_rubela.xml -p ns3-git -i ns3 --sourcedir=.\r\n\r\n    Download dependencies: bake.py download (If libc-debug is not found you need to install it. libc6-dbg in Ubuntu)\r\n\r\n    Build and install bake.py build\r\n\r\n    Build lua static: Follow the indications in the corresponding README copy the lua executable obtained in utils\r\n\r\nRunning an example:\r\n\r\n    Copy some files into ns3: cd utils sh config-dce-rate-loss.sh cd ..\r\n\r\n    Run a simulation: cd ns-3-dce-git ./waf --run dce-lamim-1\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}